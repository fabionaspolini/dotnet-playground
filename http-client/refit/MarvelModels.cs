using System;
using System.Globalization;
using Maestria.Extensions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Refit;

// Generated by https://quicktype.io

namespace refit_playground;

public class BaseRequest
{
    public string _privateKey;

    public BaseRequest(string privateKey, string publicKey)
    {
        _privateKey = privateKey;
        PublicKey = publicKey;
    }

    [AliasAs("ts")]
    public Guid Ts { get; } = Guid.NewGuid();

    [AliasAs("hash")]
    public string Hash => (Ts + _privateKey + PublicKey).GetHashMd5();

    [AliasAs("apikey")]
    public string PublicKey { get; }
}

public class CharactersRequest : BaseRequest
{
    public CharactersRequest(string privateKey, string publicKey) : base(privateKey, publicKey)
    {
    }

    [AliasAs("limit")]
    public int Limit { get; set; } = 20;
}

public partial class CharactersResponse
{
    [JsonProperty("code")]
    public long Code { get; set; }

    [JsonProperty("status")]
    public string Status { get; set; }

    [JsonProperty("copyright")]
    public string Copyright { get; set; }

    [JsonProperty("attributionText")]
    public string AttributionText { get; set; }

    [JsonProperty("attributionHTML")]
    public string AttributionHtml { get; set; }

    [JsonProperty("etag")]
    public string Etag { get; set; }

    [JsonProperty("data")]
    public Data Data { get; set; }
}

public partial class Data
{
    [JsonProperty("offset")]
    public long Offset { get; set; }

    [JsonProperty("limit")]
    public long Limit { get; set; }

    [JsonProperty("total")]
    public long Total { get; set; }

    [JsonProperty("count")]
    public long Count { get; set; }

    [JsonProperty("results")]
    public Result[] Results { get; set; }
}

public partial class Result
{
    [JsonProperty("id")]
    public long Id { get; set; }

    [JsonProperty("name")]
    public string Name { get; set; }

    [JsonProperty("description")]
    public string Description { get; set; }

    [JsonProperty("modified")]
    public string Modified { get; set; }

    [JsonProperty("thumbnail")]
    public Thumbnail Thumbnail { get; set; }

    [JsonProperty("resourceURI")]
    public Uri ResourceUri { get; set; }

    [JsonProperty("comics")]
    public Comics Comics { get; set; }

    [JsonProperty("series")]
    public Comics Series { get; set; }

    [JsonProperty("stories")]
    public Stories Stories { get; set; }

    [JsonProperty("events")]
    public Comics Events { get; set; }

    [JsonProperty("urls")]
    public Url[] Urls { get; set; }
}

public partial class Comics
{
    [JsonProperty("available")]
    public long Available { get; set; }

    [JsonProperty("collectionURI")]
    public Uri CollectionUri { get; set; }

    [JsonProperty("items")]
    public ComicsItem[] Items { get; set; }

    [JsonProperty("returned")]
    public long Returned { get; set; }
}

public partial class ComicsItem
{
    [JsonProperty("resourceURI")]
    public Uri ResourceUri { get; set; }

    [JsonProperty("name")]
    public string Name { get; set; }
}

public partial class Stories
{
    [JsonProperty("available")]
    public long Available { get; set; }

    [JsonProperty("collectionURI")]
    public Uri CollectionUri { get; set; }

    [JsonProperty("items")]
    public StoriesItem[] Items { get; set; }

    [JsonProperty("returned")]
    public long Returned { get; set; }
}

public partial class StoriesItem
{
    [JsonProperty("resourceURI")]
    public Uri ResourceUri { get; set; }

    [JsonProperty("name")]
    public string Name { get; set; }

    [JsonProperty("type")]
    public ItemType Type { get; set; }
}

public partial class Thumbnail
{
    [JsonProperty("path")]
    public Uri Path { get; set; }

    [JsonProperty("extension")]
    public Extension Extension { get; set; }
}

public partial class Url
{
    [JsonProperty("type")]
    public UrlType Type { get; set; }

    [JsonProperty("url")]
    public Uri UrlUrl { get; set; }
}

public enum ItemType { Ad, Backcovers, Cover, Empty, InteriorStory, Pinup, Recap, TextArticle };

public enum Extension { Gif, Jpg };

public enum UrlType { Comiclink, Detail, Wiki };

public partial class CharactersResponse
{
    public static CharactersResponse FromJson(string json) => JsonConvert.DeserializeObject<CharactersResponse>(json, Converter.Settings);
}

public static class Serialize
{
    public static string ToJson(this CharactersResponse self) => JsonConvert.SerializeObject(self, Converter.Settings);
}

internal static class Converter
{
    public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
    {
        MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
        DateParseHandling = DateParseHandling.None,
        Converters = {
            ItemTypeConverter.Singleton,
            ExtensionConverter.Singleton,
            UrlTypeConverter.Singleton,
            new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
        },
    };
}

internal class ItemTypeConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(ItemType) || t == typeof(ItemType?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        switch (value)
        {
            case "":
                return ItemType.Empty;
            case "ad":
                return ItemType.Ad;
            case "backcovers":
                return ItemType.Backcovers;
            case "cover":
                return ItemType.Cover;
            case "interiorStory":
                return ItemType.InteriorStory;
            case "pinup":
                return ItemType.Pinup;
            case "recap":
                return ItemType.Recap;
            case "text article":
                return ItemType.TextArticle;
        }
        throw new Exception("Cannot unmarshal type ItemType");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (ItemType)untypedValue;
        switch (value)
        {
            case ItemType.Empty:
                serializer.Serialize(writer, "");
                return;
            case ItemType.Ad:
                serializer.Serialize(writer, "ad");
                return;
            case ItemType.Backcovers:
                serializer.Serialize(writer, "backcovers");
                return;
            case ItemType.Cover:
                serializer.Serialize(writer, "cover");
                return;
            case ItemType.InteriorStory:
                serializer.Serialize(writer, "interiorStory");
                return;
            case ItemType.Pinup:
                serializer.Serialize(writer, "pinup");
                return;
            case ItemType.Recap:
                serializer.Serialize(writer, "recap");
                return;
            case ItemType.TextArticle:
                serializer.Serialize(writer, "text article");
                return;
        }
        throw new Exception("Cannot marshal type ItemType");
    }

    public static readonly ItemTypeConverter Singleton = new ItemTypeConverter();
}

internal class ExtensionConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(Extension) || t == typeof(Extension?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        switch (value)
        {
            case "gif":
                return Extension.Gif;
            case "jpg":
                return Extension.Jpg;
        }
        throw new Exception("Cannot unmarshal type Extension");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (Extension)untypedValue;
        switch (value)
        {
            case Extension.Gif:
                serializer.Serialize(writer, "gif");
                return;
            case Extension.Jpg:
                serializer.Serialize(writer, "jpg");
                return;
        }
        throw new Exception("Cannot marshal type Extension");
    }

    public static readonly ExtensionConverter Singleton = new ExtensionConverter();
}

internal class UrlTypeConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(UrlType) || t == typeof(UrlType?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        switch (value)
        {
            case "comiclink":
                return UrlType.Comiclink;
            case "detail":
                return UrlType.Detail;
            case "wiki":
                return UrlType.Wiki;
        }
        throw new Exception("Cannot unmarshal type UrlType");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (UrlType)untypedValue;
        switch (value)
        {
            case UrlType.Comiclink:
                serializer.Serialize(writer, "comiclink");
                return;
            case UrlType.Detail:
                serializer.Serialize(writer, "detail");
                return;
            case UrlType.Wiki:
                serializer.Serialize(writer, "wiki");
                return;
        }
        throw new Exception("Cannot marshal type UrlType");
    }

    public static readonly UrlTypeConverter Singleton = new UrlTypeConverter();
}